{"ast":null,"code":"var _jsxFileName = \"/Users/beatrisilieve/drf-react-todo-app/client/src/hooks/auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useEffect, useState } from \"react\";\nimport { useServices } from \"./services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nconst useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children,\n    initialIsLoggedIn\n  } = _ref;\n  const [isLoggedIn, setLoggedIn] = useState(initialIsLoggedIn);\n  const {\n    httpService,\n    storageService,\n    urlsService\n  } = useServices();\n  const login = useCallback(async (username, password) => {\n    const credentials = {\n      username,\n      password\n    }; // STEP 1\n\n    const {\n      access,\n      refresh\n    } = await httpService.post(urlsService.getLoginUrl(), credentials); // STEP 2\n\n    storageService.set('accessToken', access);\n    storageService.set('refreshToken', refresh);\n    setLoggedIn(true);\n  }, [httpService, storageService, urlsService]);\n  const register = useCallback(async (username, password) => {\n    const credentials = {\n      username,\n      password\n    };\n    await httpService.post(urlsService.getRegisterUrl(), credentials);\n  }, [httpService, urlsService]);\n  const logout = useCallback(() => {}, []);\n  const value = {\n    isLoggedIn,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(AuthProvider, \"rT4ojNW5W+Ivt7rS3PYNvh6Tjhs=\", false, function () {\n  return [useServices];\n});\n\n_c = AuthProvider;\nexport { useAuth };\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/beatrisilieve/drf-react-todo-app/client/src/hooks/auth.js"],"names":["createContext","useCallback","useContext","useEffect","useState","useServices","AuthContext","useAuth","AuthProvider","children","initialIsLoggedIn","isLoggedIn","setLoggedIn","httpService","storageService","urlsService","login","username","password","credentials","access","refresh","post","getLoginUrl","set","register","getRegisterUrl","logout","value"],"mappings":";;;;AAAA,SAAQA,aAAR,EAAuBC,WAAvB,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2DC,QAA3D,QAA0E,OAA1E;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,MAAMC,WAAW,gBAAGN,aAAa,EAAjC;;AAEA,MAAMO,OAAO,GAAG;AAAA;;AAAA,SAAML,UAAU,CAACI,WAAD,CAAhB;AAAA,CAAhB;;GAAMC,O;;AAEN,MAAMC,YAAY,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAkC;AACpD,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BR,QAAQ,CAACM,iBAAD,CAA1C;AACA,QAAM;AACFG,IAAAA,WADE;AAEFC,IAAAA,cAFE;AAGFC,IAAAA;AAHE,MAIFV,WAAW,EAJf;AAMA,QAAMW,KAAK,GAAGf,WAAW,CACrB,OAAOgB,QAAP,EAAiBC,QAAjB,KAA8B;AAC1B,UAAMC,WAAW,GAAG;AAAEF,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAApB,CAD0B,CAG1B;;AACA,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsB,MAAMR,WAAW,CAACS,IAAZ,CAAiBP,WAAW,CAACQ,WAAZ,EAAjB,EAA4CJ,WAA5C,CAAlC,CAJ0B,CAM1B;;AACAL,IAAAA,cAAc,CAACU,GAAf,CAAmB,aAAnB,EAAkCJ,MAAlC;AACAN,IAAAA,cAAc,CAACU,GAAf,CAAmB,cAAnB,EAAmCH,OAAnC;AAEAT,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAZoB,EAarB,CAACC,WAAD,EAAcC,cAAd,EAA8BC,WAA9B,CAbqB,CAAzB;AAgBA,QAAMU,QAAQ,GAAGxB,WAAW,CACxB,OAAOgB,QAAP,EAAiBC,QAAjB,KAA8B;AAC1B,UAAMC,WAAW,GAAG;AAACF,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAApB;AACA,UAAML,WAAW,CAACS,IAAZ,CAAiBP,WAAW,CAACW,cAAZ,EAAjB,EAA+CP,WAA/C,CAAN;AACH,GAJuB,EAKxB,CAACN,WAAD,EAAcE,WAAd,CALwB,CAA5B;AAQA,QAAMY,MAAM,GAAG1B,WAAW,CACtB,MAAM,CACL,CAFqB,EAGtB,EAHsB,CAA1B;AAMA,QAAM2B,KAAK,GAAG;AACVjB,IAAAA,UADU;AAEVK,IAAAA,KAFU;AAGVS,IAAAA,QAHU;AAIVE,IAAAA;AAJU,GAAd;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,KAA7B;AAAA,cACFnB;AADE;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAhDD;;IAAMD,Y;UAMEH,W;;;KANFG,Y;AAkDN,SACID,OADJ;AAIA,eAAeC,YAAf","sourcesContent":["import {createContext, useCallback, useContext, useEffect, useState} from \"react\";\nimport {useServices} from \"./services\";\n\nconst AuthContext = createContext();\n\nconst useAuth = () => useContext(AuthContext);\n\nconst AuthProvider = ({children, initialIsLoggedIn}) => {\n    const [isLoggedIn, setLoggedIn] = useState(initialIsLoggedIn);\n    const {\n        httpService,\n        storageService,\n        urlsService,\n    } = useServices();\n\n    const login = useCallback(\n        async (username, password) => {\n            const credentials = { username, password };\n    \n            // STEP 1\n            const { access, refresh } = await httpService.post(urlsService.getLoginUrl(), credentials);\n    \n            // STEP 2\n            storageService.set('accessToken', access);\n            storageService.set('refreshToken', refresh);\n    \n            setLoggedIn(true);\n        },\n        [httpService, storageService, urlsService],\n    );\n\n    const register = useCallback(\n        async (username, password) => {\n            const credentials = {username, password};\n            await httpService.post(urlsService.getRegisterUrl(), credentials);\n        },\n        [httpService, urlsService],\n    );\n\n    const logout = useCallback(\n        () => {\n        },\n        [],\n    );\n\n    const value = {\n        isLoggedIn,\n        login,\n        register,\n        logout,\n    };\n\n    return <AuthContext.Provider value={value}>\n        {children}\n    </AuthContext.Provider>\n}\n\nexport {\n    useAuth,\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}