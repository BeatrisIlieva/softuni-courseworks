{"ast":null,"code":"var _jsxFileName = \"/Users/beatrisilieve/drf-react-todo-app/client/src/hooks/todos.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useEffect, useState } from \"react\";\nimport { useServices } from \"./services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodosContext = /*#__PURE__*/createContext();\n\nconst useTodos = () => {\n  _s();\n\n  return useContext(TodosContext);\n};\n\n_s(useTodos, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst TodosProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [todos, setTodos] = useState([]);\n  const [todoDetails, setTodoDetails] = useState({\n    title: '',\n    description: '',\n    state: false\n  });\n  const [query, setQuery] = useState({});\n  const {\n    httpService,\n    urlsService\n  } = useServices();\n  const loadTodos = useCallback(async () => {\n    const newTodos = await httpService.get(urlsService.getTodosListUrl(), query);\n    setTodos(newTodos);\n  }, [httpService, query, urlsService]);\n  const loadTodoDetails = useCallback(async id => {\n    const newTodo = await httpService.get(urlsService.getTodoDetailsUrl(id));\n    setTodoDetails(newTodo);\n  }, [httpService, urlsService]);\n  const changeTodoState = useCallback(async () => {\n    const {\n      id,\n      state\n    } = todoDetails;\n    const payload = { ...todoDetails,\n      state: !state\n    };\n    await httpService.put(urlsService.getTodoUpdateUrl(id), payload);\n    await loadTodoDetails(id);\n  }, [httpService, loadTodoDetails, todoDetails, urlsService]);\n  const createTodo = useCallback(async todo => {\n    await httpService.post(urlsService.getTodoCreateUrl(), todo);\n    await loadTodos();\n  }, [httpService, loadTodos, urlsService]);\n  const applyFilter = useCallback(_ref2 => {\n    let {\n      state,\n      category\n    } = _ref2;\n    setQuery({\n      state,\n      category\n    });\n  }, []);\n  useEffect(() => {\n    (async () => {\n      await loadTodos();\n    })();\n  }, [loadTodos]);\n  const value = {\n    todoDetails,\n    todos,\n    loadTodos,\n    loadTodoDetails,\n    changeTodoState,\n    createTodo,\n    applyFilter\n  };\n  return /*#__PURE__*/_jsxDEV(TodosContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(TodosProvider, \"yj1HLYSFhC77dsFsHGmyyAsaPNg=\", false, function () {\n  return [useServices];\n});\n\n_c = TodosProvider;\nexport { useTodos };\nexport default TodosProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosProvider\");","map":{"version":3,"sources":["/Users/beatrisilieve/drf-react-todo-app/client/src/hooks/todos.js"],"names":["createContext","useCallback","useContext","useEffect","useState","useServices","TodosContext","useTodos","TodosProvider","children","todos","setTodos","todoDetails","setTodoDetails","title","description","state","query","setQuery","httpService","urlsService","loadTodos","newTodos","get","getTodosListUrl","loadTodoDetails","id","newTodo","getTodoDetailsUrl","changeTodoState","payload","put","getTodoUpdateUrl","createTodo","todo","post","getTodoCreateUrl","applyFilter","category","value"],"mappings":"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","sourcesContent":["import {createContext, useCallback, useContext, useEffect, useState} from \"react\";\nimport {useServices} from \"./services\";\n\nconst TodosContext = createContext();\n\nconst useTodos = () => useContext(TodosContext);\n\nconst TodosProvider = ({children}) => {\n    const [todos, setTodos] = useState([]);\n    const [todoDetails, setTodoDetails] = useState({\n        title: '',\n        description: '',\n        state: false,\n    });\n    const [query, setQuery] = useState({});\n    const {\n        httpService,\n        urlsService,\n    } = useServices();\n\n    const loadTodos = useCallback(async () => {\n        const newTodos = await httpService.get(urlsService.getTodosListUrl(), query);\n        setTodos(newTodos);\n    }, [httpService, query, urlsService]);\n\n    const loadTodoDetails = useCallback(\n        async (id) => {\n            const newTodo = await httpService.get(urlsService.getTodoDetailsUrl(id));\n            setTodoDetails(newTodo);\n        },\n        [httpService, urlsService],\n    );\n\n    const changeTodoState = useCallback(\n        async () => {\n            const {id, state} = todoDetails;\n            const payload = {\n                ...todoDetails,\n                state: !state,\n            };\n            await httpService.put(urlsService.getTodoUpdateUrl(id), payload);\n            await loadTodoDetails(id);\n        },\n        [httpService, loadTodoDetails, todoDetails, urlsService],\n    );\n\n    const createTodo = useCallback(\n        async (todo) => {\n            await httpService.post(urlsService.getTodoCreateUrl(), todo);\n            await loadTodos();\n        },\n        [httpService, loadTodos, urlsService],\n    );\n\n    const applyFilter = useCallback(\n        ({state, category}) => {\n            setQuery({state, category});\n        },\n        [],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadTodos();\n            })();\n        },\n        [loadTodos],\n    )\n\n    const value = {\n        todoDetails,\n        todos,\n        loadTodos,\n        loadTodoDetails,\n        changeTodoState,\n        createTodo,\n        applyFilter,\n    };\n\n    return <TodosContext.Provider value={value}>\n        {children}\n    </TodosContext.Provider>\n}\n\nexport {\n    useTodos,\n}\n\nexport default TodosProvider;"]},"metadata":{},"sourceType":"module"}