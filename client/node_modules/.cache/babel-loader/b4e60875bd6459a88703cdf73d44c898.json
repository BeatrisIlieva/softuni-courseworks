{"ast":null,"code":"import Cookies from \"universal-cookie/es6\";\nconst cookies = new Cookies();\n\nclass HttpService {\n  constructor(storageService) {\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': cookies.get('csrftoken')\n    };\n    this.storageService = storageService;\n  } // STEP 3\n\n\n  get defaultOptions() {\n    const accessToken = this.storageService.get('accessToken'); // Fetch the JWT token\n\n    const authorizationToken = accessToken ? {\n      'Authorization': `Bearer ${accessToken}`\n    } // Use 'Bearer' for JWT\n    : {};\n    return {\n      headers: { ...this.defaultHeaders,\n        // Any predefined headers\n        ...authorizationToken // Add the authorization token if available\n\n      }\n    };\n  }\n\n  async request(method, url, body, query) {\n    const bodyOptions = body ? {\n      body: JSON.stringify(body)\n    } : {};\n    const options = { ...this.defaultOptions,\n      method: method,\n      ...bodyOptions\n    };\n    const queryParams = query ? Object.keys(query).filter(key => query[key]).map(key => `${key}=${query[key]}`).join('&') : '';\n    const queryString = queryParams ? `?${queryParams}` : '';\n    const response = await fetch(`${url}${queryString}`, options);\n    return await response.json();\n  }\n\n  async get(url, query) {\n    return this.request('get', url, null, query);\n  }\n\n  async post(url, body) {\n    return this.request('post', url, body);\n  }\n\n  async put(url, body) {\n    return this.request('put', url, body);\n  }\n\n}\n\nexport default HttpService;","map":{"version":3,"sources":["/Users/beatrisilieve/drf-react-todo-app/client/src/services/http.js"],"names":["Cookies","cookies","HttpService","constructor","storageService","defaultHeaders","get","defaultOptions","accessToken","authorizationToken","headers","request","method","url","body","query","bodyOptions","JSON","stringify","options","queryParams","Object","keys","filter","key","map","join","queryString","response","fetch","json","post","put"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AAEA,MAAME,WAAN,CAAkB;AAMdC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAAA,SAL5BC,cAK4B,GALX;AACb,sBAAgB,kBADH;AAEb,qBAAeJ,OAAO,CAACK,GAAR,CAAY,WAAZ;AAFF,KAKW;AACxB,SAAKF,cAAL,GAAsBA,cAAtB;AACH,GARa,CAUd;;;AACkB,MAAdG,cAAc,GAAG;AACjB,UAAMC,WAAW,GAAG,KAAKJ,cAAL,CAAoBE,GAApB,CAAwB,aAAxB,CAApB,CADiB,CAC2C;;AAC5D,UAAMG,kBAAkB,GAAGD,WAAW,GAChC;AAAE,uBAAkB,UAASA,WAAY;AAAzC,KADgC,CACa;AADb,MAEhC,EAFN;AAIA,WAAO;AACHE,MAAAA,OAAO,EAAE,EACL,GAAG,KAAKL,cADH;AACmB;AACxB,WAAGI,kBAFE,CAEkB;;AAFlB;AADN,KAAP;AAMH;;AAGY,QAAPE,OAAO,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2B;AACpC,UAAMC,WAAW,GAAGF,IAAI,GAClB;AAACA,MAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAAP,KADkB,GAElB,EAFN;AAGA,UAAMK,OAAO,GAAG,EACZ,GAAG,KAAKZ,cADI;AAEZK,MAAAA,MAAM,EAAEA,MAFI;AAGZ,SAAGI;AAHS,KAAhB;AAMA,UAAMI,WAAW,GAAGL,KAAK,GACnBM,MAAM,CAACC,IAAP,CAAYP,KAAZ,EACGQ,MADH,CACUC,GAAG,IAAIT,KAAK,CAACS,GAAD,CADtB,EAEGC,GAFH,CAEOD,GAAG,IAAK,GAAEA,GAAI,IAAGT,KAAK,CAACS,GAAD,CAAM,EAFnC,EAGGE,IAHH,CAGQ,GAHR,CADmB,GAKnB,EALN;AAOA,UAAMC,WAAW,GAAGP,WAAW,GACxB,IAAGA,WAAY,EADS,GAEzB,EAFN;AAIA,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhB,GAAI,GAAEc,WAAY,EAAtB,EAAyBR,OAAzB,CAA5B;AAEA,WAAO,MAAMS,QAAQ,CAACE,IAAT,EAAb;AACH;;AAEQ,QAAHxB,GAAG,CAACO,GAAD,EAAME,KAAN,EAAa;AAClB,WAAO,KAAKJ,OAAL,CAAa,KAAb,EAAoBE,GAApB,EAAyB,IAAzB,EAA+BE,KAA/B,CAAP;AACH;;AAES,QAAJgB,IAAI,CAAClB,GAAD,EAAMC,IAAN,EAAY;AAClB,WAAO,KAAKH,OAAL,CAAa,MAAb,EAAqBE,GAArB,EAA0BC,IAA1B,CAAP;AACH;;AAEQ,QAAHkB,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAY;AACjB,WAAO,KAAKH,OAAL,CAAa,KAAb,EAAoBE,GAApB,EAAyBC,IAAzB,CAAP;AACH;;AA9Da;;AAiElB,eAAeZ,WAAf","sourcesContent":["import Cookies from \"universal-cookie/es6\";\n\nconst cookies = new Cookies();\n\nclass HttpService {\n    defaultHeaders = {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': cookies.get('csrftoken'),\n    }\n\n    constructor(storageService) {\n        this.storageService = storageService;\n    }\n\n    // STEP 3\n    get defaultOptions() {\n        const accessToken = this.storageService.get('accessToken'); // Fetch the JWT token\n        const authorizationToken = accessToken\n            ? { 'Authorization': `Bearer ${accessToken}` } // Use 'Bearer' for JWT\n            : {};\n    \n        return {\n            headers: {\n                ...this.defaultHeaders, // Any predefined headers\n                ...authorizationToken, // Add the authorization token if available\n            },\n        };\n    }\n    \n\n    async request(method, url, body, query) {\n        const bodyOptions = body\n            ? {body: JSON.stringify(body)}\n            : {};\n        const options = {\n            ...this.defaultOptions,\n            method: method,\n            ...bodyOptions,\n        };\n\n        const queryParams = query\n            ? Object.keys(query)\n                .filter(key => query[key])\n                .map(key => `${key}=${query[key]}`)\n                .join('&')\n            : '';\n\n        const queryString = queryParams\n            ? `?${queryParams}`\n            : '';\n\n        const response = await fetch(`${url}${queryString}`, options);\n\n        return await response.json();\n    }\n\n    async get(url, query) {\n        return this.request('get', url, null, query);\n    }\n\n    async post(url, body) {\n        return this.request('post', url, body);\n    }\n\n    async put(url, body) {\n        return this.request('put', url, body);\n    }\n}\n\nexport default HttpService;"]},"metadata":{},"sourceType":"module"}