{"ast":null,"code":"var _jsxFileName = \"/Users/beatrisilieve/drf-react-todo-app/client/src/layout/AppNav.js\",\n    _s = $RefreshSig$();\n\nimport styles from './AppNav.module.scss';\nimport { useAuth } from \"../hooks/auth\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst publicRoutes = [{\n  text: 'Login',\n  link: '/login'\n}, {\n  text: 'Register',\n  link: '/register'\n}];\nconst privateRoutes = [{\n  text: 'Logout',\n  link: '/logout'\n}];\n\nconst AppNav = () => {\n  _s();\n\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [currentRoute, setCurrentRoute] = useState(null);\n  const [routes, setRoutes] = useState(publicRoutes);\n  const location = useLocation();\n  useEffect(() => {\n    setRoutes(isLoggedIn ? privateRoutes : publicRoutes);\n  }, [isLoggedIn]);\n  useEffect(() => {\n    let route = routes.find(r => r.link === location.pathname);\n\n    if (!route) {\n      route = routes[0];\n    }\n\n    setCurrentRoute(route);\n  }, [location, routes]);\n\n  const renderLink = route => {\n    const className = route.link === (currentRoute === null || currentRoute === void 0 ? void 0 : currentRoute.link) ? styles.disabled : '';\n    return /*#__PURE__*/_jsxDEV(Link, {\n      className: className,\n      to: route.link,\n      children: route.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.listNav,\n      children: routes.map(r => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.listNavItem,\n        children: renderLink(r)\n      }, r.link, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppNav, \"WWV2I89vYRgE043pTfkNhBj/Lbg=\", false, function () {\n  return [useAuth, useLocation];\n});\n\n_c = AppNav;\nexport default AppNav;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNav\");","map":{"version":3,"sources":["/Users/beatrisilieve/drf-react-todo-app/client/src/layout/AppNav.js"],"names":["styles","useAuth","useEffect","useState","Link","useLocation","publicRoutes","text","link","privateRoutes","AppNav","isLoggedIn","currentRoute","setCurrentRoute","routes","setRoutes","location","route","find","r","pathname","renderLink","className","disabled","listNav","map","listNavItem"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,IAAR,EAAcC,WAAd,QAAgC,kBAAhC;;AAEA,MAAMC,YAAY,GAAG,CACjB;AACIC,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,IAAI,EAAE;AAFV,CADiB,EAKjB;AACID,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,IAAI,EAAE;AAFV,CALiB,CAArB;AAWA,MAAMC,aAAa,GAAG,CAClB;AACIF,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,IAAI,EAAE;AAFV,CADkB,CAAtB;;AAOA,MAAME,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM;AAACC,IAAAA;AAAD,MAAeV,OAAO,EAA5B;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAACG,YAAD,CAApC;AACA,QAAMU,QAAQ,GAAGX,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,SAAS,CACLJ,UAAU,GACJF,aADI,GAEJH,YAHD,CAAT;AAKH,GANQ,EAMN,CAACK,UAAD,CANM,CAAT;AAQAT,EAAAA,SAAS,CACL,MAAM;AACF,QAAIe,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACX,IAAF,KAAWQ,QAAQ,CAACI,QAArC,CAAZ;;AACA,QAAI,CAACH,KAAL,EAAY;AACRA,MAAAA,KAAK,GAAGH,MAAM,CAAC,CAAD,CAAd;AACH;;AACDD,IAAAA,eAAe,CAACI,KAAD,CAAf;AACH,GAPI,EAQL,CAACD,QAAD,EAAWF,MAAX,CARK,CAAT;;AAWA,QAAMO,UAAU,GAAIJ,KAAD,IAAW;AAC1B,UAAMK,SAAS,GAAGL,KAAK,CAACT,IAAN,MAAeI,YAAf,aAAeA,YAAf,uBAAeA,YAAY,CAAEJ,IAA7B,IACZR,MAAM,CAACuB,QADK,GAEZ,EAFN;AAGA,wBACI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAED,SAAjB;AAA4B,MAAA,EAAE,EAAEL,KAAK,CAACT,IAAtC;AAAA,gBAA6CS,KAAK,CAACV;AAAnD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAPD;;AASA,sBACI;AAAA,2BACI;AAAI,MAAA,SAAS,EAAEP,MAAM,CAACwB,OAAtB;AAAA,gBACKV,MAAM,CAACW,GAAP,CAAWN,CAAC,iBACT;AAAiB,QAAA,SAAS,EAAEnB,MAAM,CAAC0B,WAAnC;AAAA,kBACKL,UAAU,CAACF,CAAD;AADf,SAASA,CAAC,CAACX,IAAX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA7CD;;GAAME,M;UACmBT,O,EAGJI,W;;;KAJfK,M;AA+CN,eAAeA,MAAf","sourcesContent":["import styles from './AppNav.module.scss';\nimport {useAuth} from \"../hooks/auth\";\nimport {useEffect, useState} from \"react\";\nimport {Link, useLocation} from \"react-router-dom\";\n\nconst publicRoutes = [\n    {\n        text: 'Login',\n        link: '/login',\n    },\n    {\n        text: 'Register',\n        link: '/register',\n    },\n];\n\nconst privateRoutes = [\n    {\n        text: 'Logout',\n        link: '/logout',\n    },\n];\n\nconst AppNav = () => {\n    const {isLoggedIn} = useAuth();\n    const [currentRoute, setCurrentRoute] = useState(null);\n    const [routes, setRoutes] = useState(publicRoutes);\n    const location = useLocation();\n\n    useEffect(() => {\n        setRoutes(\n            isLoggedIn\n                ? privateRoutes\n                : publicRoutes\n        )\n    }, [isLoggedIn]);\n\n    useEffect(\n        () => {\n            let route = routes.find(r => r.link === location.pathname);\n            if (!route) {\n                route = routes[0]\n            }\n            setCurrentRoute(route);\n        },\n        [location, routes]\n    );\n\n    const renderLink = (route) => {\n        const className = route.link === currentRoute?.link\n            ? styles.disabled\n            : '';\n        return (\n            <Link className={className} to={route.link}>{route.text}</Link>\n        )\n    }\n\n    return (\n        <nav>\n            <ul className={styles.listNav}>\n                {routes.map(r => (\n                    <li key={r.link} className={styles.listNavItem}>\n                        {renderLink(r)}\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\nexport default AppNav;\n"]},"metadata":{},"sourceType":"module"}